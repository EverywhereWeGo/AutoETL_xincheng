/*此脚本算法为0614，算法模板为S06149111，是从EDW技术缓冲层(WTL)向整合模型层(WML)加载的基于全量数据删除拉链算法(用NOT IN比较增量，正反两次)*/


TRUNCATE TABLE DW.DW_T02_CE_MERCHD_INFO_H;

/*支持重跑*/   
-- DELETE FROM  DW.DW_T02_CE_MERCHD_INFO_H  WHERE START_DT >= '${TX_DATE}'
-- AND ETL_JOB_NUM = 11;

-- UPDATE DW.DW_T02_CE_MERCHD_INFO_H 
-- SET    END_DT = '2999-12-31'
-- WHERE  END_DT >= '${TX_DATE}'
-- AND    END_DT <> '2999-12-31'
-- AND    ETL_JOB_NUM = 11;

DROP TABLE IF EXISTS DW.VT_DEL_11;
CREATE TABLE DW.VT_DEL_11 AS SELECT * FROM DW.DW_T02_CE_MERCHD_INFO_H WHERE 1<>1;

-- CREATE GLOBAL TEMPORARY TABLE VT_NEW_11 ON COMMIT PRESERVE ROWS AS SELECT * FROM  DW.DW_T02_CE_MERCHD_INFO_H WHERE 1<>1;
-- CREATE  TABLE IF NOT EXISTS VT_NEW_11 AS SELECT * FROM DW.DW_T02_CE_MERCHD_INFO_H WHERE 1<>1;
DROP TABLE IF EXISTS DW.VT_NEW_11;
CREATE TABLE DW.VT_NEW_11 AS SELECT * FROM DW.DW_T02_CE_MERCHD_INFO_H WHERE 1<>1;

-- CREATE GLOBAL TEMPORARY TABLE VT_INC_11 ON COMMIT PRESERVE ROWS AS SELECT * FROM  DW.DW_T02_CE_MERCHD_INFO_H WHERE 1<>1;
-- CREATE  TABLE IF NOT EXISTS VT_INC_11 SELECT * FROM DW.DW_T02_CE_MERCHD_INFO_H WHERE 1<>1;
DROP TABLE IF EXISTS DW.VT_INC_11;
CREATE TABLE DW.VT_INC_11 AS SELECT * FROM DW.DW_T02_CE_MERCHD_INFO_H WHERE 1<>1;


/*支持重跑，数据备份到临时表*/
INSERT INTO DW.VT_DEL_11
SELECT 
	   	T1.ID
		,T1.STOCK
		,T1.START_DT
		,T1.OWNED_MALL
		,T1.MALL_NAME
		,T1.MALL_ADDR
		,T1.MALL_ID
		,T1.OWNED_MERCHT
		,T1.MERCHT_NAME
		,T1.MERCHT_ID
		,T1.COUNTER_ADDR
		,T1.MERCHD_NAME
		,T1.MERCHD_SPECIFICATIONS
		,T1.GOOD_NO
		,T1.IS_REAL
		,T1.SUGGEST_SELL_PRICE
		,T1.NOTES
		,T1.MERCHD_TYPE
		,T1.MERCHD_CLASS
		,T1.MERCHD_CLASS_CODE
		,T1.MERCHD_CLASS_NAME
		,T1.GOODBASE_SYS_BUILT_IN_DATA
		,T1.GOODBASE_ENABLE_STAT
		,T1.GOODBASE_SUMMARY
		,T1.IS_GOODBASE_DELETE
		,T1.MEM_CODE
		,T1.EXTEND_MERCHD_ID
		,T1.IS_ALLOWED_IT_PRICE
		,T1.IS_NEED_AUTH
		,T1.AMOUNT
		,T1.LASTINPRICE
		,T1.PRICE
		,T1.STOCK_SUMMARY
		,T1.FREEZE_AMOUNT
		,T1.MERCHD_TYPE_SYS_BUILT_IN_DATA
		,T1.MERCHD_TYPE_ENABLE_STAT
		,T1.IS_MERCHD_TYPE_DELETE
		,T1.IS_HQ
		,T1.MALL_SYS_BUILT_IN_DATA
		,T1.MALL_ENABLE_STAT
		,T1.IS_MALL_DELETE
		,T1.MERCHT_TYPE
		,T1.MERCHT_SYS_BUILT_IN_DATA
		,T1.MERCHT_ENABLE_STAT
		,T1.FINAL_UPDATE_EMPLY
		,T1.IS_MERCHT_DELETE
        ,CASE WHEN T1.END_DT >='${TX_DATE}' AND END_DT <> '2999-12-31' AND ETL_JOB_NUM= 11 THEN '2999-12-31'
              ELSE T1.END_DT
        END
        ,T1.DATA_SRC_TABLE_NAME
        ,T1.ETL_JOB_NUM
        ,T1.ETL_LAD_DTE
FROM DW.DW_T02_CE_MERCHD_INFO_H T1
WHERE T1.START_DT < '${TX_DATE}'
  AND T1.ETL_JOB_NUM = 11 
;


   

INSERT INTO DW.VT_NEW_11 (     /*现在处理GROUP_NUM为[YCH_GAME_MACHINE-]的组*/
        ID
		,STOCK
		,START_DT
		,OWNED_MALL
		,MALL_NAME
		,MALL_ADDR
		,MALL_ID
		,OWNED_MERCHT
		,MERCHT_NAME
		,MERCHT_ID
		,COUNTER_ADDR
		,MERCHD_NAME
		,MERCHD_SPECIFICATIONS
		,GOOD_NO
		,IS_REAL
		,SUGGEST_SELL_PRICE
		,NOTES
		,MERCHD_TYPE
		,MERCHD_CLASS
		,MERCHD_CLASS_CODE
		,MERCHD_CLASS_NAME
		,GOODBASE_SYS_BUILT_IN_DATA
		,GOODBASE_ENABLE_STAT
		,GOODBASE_SUMMARY
		,IS_GOODBASE_DELETE
		,MEM_CODE
		,EXTEND_MERCHD_ID
		,IS_ALLOWED_IT_PRICE
		,IS_NEED_AUTH
		,AMOUNT
		,LASTINPRICE
		,PRICE
		,STOCK_SUMMARY
		,FREEZE_AMOUNT
		,MERCHD_TYPE_SYS_BUILT_IN_DATA
		,MERCHD_TYPE_ENABLE_STAT
		,IS_MERCHD_TYPE_DELETE
		,IS_HQ
		,MALL_SYS_BUILT_IN_DATA
		,MALL_ENABLE_STAT
		,IS_MALL_DELETE
		,MERCHT_TYPE
		,MERCHT_SYS_BUILT_IN_DATA
		,MERCHT_ENABLE_STAT
		,FINAL_UPDATE_EMPLY
		,IS_MERCHT_DELETE
		,END_DT
		,DATA_SRC_TABLE_NAME
		,ETL_JOB_NUM
		,ETL_LAD_DTE
)
SELECT
		coalesce(T1.ID,'')
		,coalesce(T2.Stock,'')
		,'${TX_DATE}'
		,coalesce(T1.OwnedMall,'')
		,coalesce(T4.MallName,'')
		,coalesce(T4.Address,'')
		,coalesce(T4.MallCode,'')
		,coalesce(T1.OwnedBusiness,'')
		,coalesce(T5.BusinessName,'')
		,coalesce(T5.BusinessNum,'')
		,coalesce(T5.Address,'')
		,coalesce(T1.GoodName,'')
		,coalesce(T1.Specifications,'')
		,coalesce(T1.GoodNO,'')
		,T1.IsReal
		,T1.SuggestSellPrice
		,coalesce(T1.Notes,'')
		,T1.GoodsType
		,coalesce(T1.GClass,'')
		,coalesce(T3.Code,'')
		,coalesce(T3.ClassName,'')
		,T1.IsSys
		,T1.IsEnable
		,coalesce(T1.Summary,'')
		,T1.IsDelete
		,coalesce(T1.MemCode,'')
		,coalesce(T1.ExtendGoodsID,'')
		,T1.IsAllowEditPrice
		,T1.IsNeedAuth
		,T2.Amount
		,T2.LastInPrice
		,T2.Totle
		,coalesce(T2.Summary,'')
		,T2.FreezeAmount
		,T3.IsSys
		,T3.IsEnable
		,T3.IsDelete
		,T4.IsMaster
		,T4.IsSys
		,T4.IsEnable
		,T4.IsDelete
		,T5.BusinessType
		,T5.IsSys
		,T5.IsEnable
		,coalesce(T5.LastEditEmployee,'')
		,T5.IsDelete
        ,'2999-12-31'
        ,'ODS_MALL_GOODBASE'
        ,11
        ,'${TX_DATE}'
FROM (select * from
			   	(select *,ROW_NUMBER() OVER(PARTITION BY id ORDER BY updatetime DESC) as num
				   from ODS.ODS_MALL_GOODBASE) t
				   where t.num = 1)T1
LEFT JOIN (select * from
			   	(select *,ROW_NUMBER() OVER(PARTITION BY GOODS,STOCK ORDER BY ETL_LAD_DTE DESC) as num
				   from ODS.ODS_MALL_GOODSSTOCK) t
				   where t.num = 1)T2
       ON T1.ID=T2.GOODS
LEFT JOIN ODS.ODS_MALL_GOODCLASS T3
       ON T1.GCLASS=T3.ID
LEFT JOIN ODS.ODS_MALL_MALL T4
       ON T1.OWNEDMALL=T4.ID
LEFT JOIN ODS.ODS_MALL_BUSINESS T5
       ON T1.OWNEDBUSINESS=T4.ID
;

/*取出新增和修改的放入VT_INC_11*/
INSERT INTO DW.VT_INC_11
SELECT  T1.* 
FROM DW.VT_NEW_11 T1
LEFT JOIN DW.VT_DEL_11 T2
       ON T2.END_DT='2999-12-31'
      AND COALESCE(T1.ID,'') = COALESCE(T2.ID,'')
	AND COALESCE(T1.OWNED_MALL,'') = COALESCE(T2.OWNED_MALL,'')
	AND COALESCE(T1.MALL_NAME,'') = COALESCE(T2.MALL_NAME,'')
	AND COALESCE(T1.MALL_ADDR,'') = COALESCE(T2.MALL_ADDR,'')
	AND COALESCE(T1.MALL_ID,'') = COALESCE(T2.MALL_ID,'')
	AND COALESCE(T1.OWNED_MERCHT,'') = COALESCE(T2.OWNED_MERCHT,'')
	AND COALESCE(T1.MERCHT_NAME,'') = COALESCE(T2.MERCHT_NAME,'')
	AND COALESCE(T1.MERCHT_ID,'') = COALESCE(T2.MERCHT_ID,'')
	AND COALESCE(T1.COUNTER_ADDR,'') = COALESCE(T2.COUNTER_ADDR,'')
	AND COALESCE(T1.MERCHD_NAME,'') = COALESCE(T2.MERCHD_NAME,'')
	AND COALESCE(T1.MERCHD_SPECIFICATIONS,'') = COALESCE(T2.MERCHD_SPECIFICATIONS,'')
	AND COALESCE(T1.GOOD_NO,'') = COALESCE(T2.GOOD_NO,'')
	AND COALESCE(T1.IS_REAL,0) = COALESCE(T2.IS_REAL,0)
	AND COALESCE(T1.SUGGEST_SELL_PRICE,0) = COALESCE(T2.SUGGEST_SELL_PRICE,0)
	AND COALESCE(T1.NOTES,'') = COALESCE(T2.NOTES,'')
	AND COALESCE(T1.MERCHD_TYPE,0) = COALESCE(T2.MERCHD_TYPE,0)
	AND COALESCE(T1.MERCHD_CLASS,'') = COALESCE(T2.MERCHD_CLASS,'')
	AND COALESCE(T1.MERCHD_CLASS_CODE,'') = COALESCE(T2.MERCHD_CLASS_CODE,'')
	AND COALESCE(T1.MERCHD_CLASS_NAME,'') = COALESCE(T2.MERCHD_CLASS_NAME,'')
	AND COALESCE(T1.GOODBASE_SYS_BUILT_IN_DATA,0) = COALESCE(T2.GOODBASE_SYS_BUILT_IN_DATA,0)
	AND COALESCE(T1.GOODBASE_ENABLE_STAT,0) = COALESCE(T2.GOODBASE_ENABLE_STAT,0)
	AND COALESCE(T1.GOODBASE_SUMMARY,'') = COALESCE(T2.GOODBASE_SUMMARY,'')
	AND COALESCE(T1.IS_GOODBASE_DELETE,0) = COALESCE(T2.IS_GOODBASE_DELETE,0)
	AND COALESCE(T1.MEM_CODE,'') = COALESCE(T2.MEM_CODE,'')
	AND COALESCE(T1.EXTEND_MERCHD_ID,'') = COALESCE(T2.EXTEND_MERCHD_ID,'')
	AND COALESCE(T1.IS_ALLOWED_IT_PRICE,0) = COALESCE(T2.IS_ALLOWED_IT_PRICE,0)
	AND COALESCE(T1.IS_NEED_AUTH,0) = COALESCE(T2.IS_NEED_AUTH,0)
	AND COALESCE(T1.STOCK,'') = COALESCE(T2.STOCK,'')
	AND COALESCE(T1.AMOUNT,0) = COALESCE(T2.AMOUNT,0)
	AND COALESCE(T1.LASTINPRICE,0) = COALESCE(T2.LASTINPRICE,0)
	AND COALESCE(T1.PRICE,0) = COALESCE(T2.PRICE,0)
	AND COALESCE(T1.STOCK_SUMMARY,'') = COALESCE(T2.STOCK_SUMMARY,'')
	AND COALESCE(T1.FREEZE_AMOUNT,0) = COALESCE(T2.FREEZE_AMOUNT,0)
	AND COALESCE(T1.MERCHD_TYPE_SYS_BUILT_IN_DATA,0) = COALESCE(T2.MERCHD_TYPE_SYS_BUILT_IN_DATA,0)
	AND COALESCE(T1.MERCHD_TYPE_ENABLE_STAT,0) = COALESCE(T2.MERCHD_TYPE_ENABLE_STAT,0)
	AND COALESCE(T1.IS_MERCHD_TYPE_DELETE,0) = COALESCE(T2.IS_MERCHD_TYPE_DELETE,0)
	AND COALESCE(T1.IS_HQ,0) = COALESCE(T2.IS_HQ,0)
	AND COALESCE(T1.MALL_SYS_BUILT_IN_DATA,0) = COALESCE(T2.MALL_SYS_BUILT_IN_DATA,0)
	AND COALESCE(T1.MALL_ENABLE_STAT,0) = COALESCE(T2.MALL_ENABLE_STAT,0)
	AND COALESCE(T1.IS_MALL_DELETE,0) = COALESCE(T2.IS_MALL_DELETE,0)
	AND COALESCE(T1.MERCHT_TYPE,0) = COALESCE(T2.MERCHT_TYPE,0)
	AND COALESCE(T1.MERCHT_SYS_BUILT_IN_DATA,0) = COALESCE(T2.MERCHT_SYS_BUILT_IN_DATA,0)
	AND COALESCE(T1.MERCHT_ENABLE_STAT,0) = COALESCE(T2.MERCHT_ENABLE_STAT,0)
	AND COALESCE(T1.FINAL_UPDATE_EMPLY,'') = COALESCE(T2.FINAL_UPDATE_EMPLY,'')
	AND COALESCE(T1.IS_MERCHT_DELETE,0) = COALESCE(T2.IS_MERCHT_DELETE,0)
WHERE T2.ID IS NULL
;


/*取出删除的也放入VT_INC_11，借用END_DT字段标识被删除的记录(即END_DT='1900-01-01'的数据)*/
INSERT INTO DW.VT_INC_11
SELECT 
		T1.ID
		,T1.STOCK
		,T1.START_DT
		,T1.OWNED_MALL
		,T1.MALL_NAME
		,T1.MALL_ADDR
		,T1.MALL_ID
		,T1.OWNED_MERCHT
		,T1.MERCHT_NAME
		,T1.MERCHT_ID
		,T1.COUNTER_ADDR
		,T1.MERCHD_NAME
		,T1.MERCHD_SPECIFICATIONS
		,T1.GOOD_NO
		,T1.IS_REAL
		,T1.SUGGEST_SELL_PRICE
		,T1.NOTES
		,T1.MERCHD_TYPE
		,T1.MERCHD_CLASS
		,T1.MERCHD_CLASS_CODE
		,T1.MERCHD_CLASS_NAME
		,T1.GOODBASE_SYS_BUILT_IN_DATA
		,T1.GOODBASE_ENABLE_STAT
		,T1.GOODBASE_SUMMARY
		,T1.IS_GOODBASE_DELETE
		,T1.MEM_CODE
		,T1.EXTEND_MERCHD_ID
		,T1.IS_ALLOWED_IT_PRICE
		,T1.IS_NEED_AUTH
		,T1.AMOUNT
		,T1.LASTINPRICE
		,T1.PRICE
		,T1.STOCK_SUMMARY
		,T1.FREEZE_AMOUNT
		,T1.MERCHD_TYPE_SYS_BUILT_IN_DATA
		,T1.MERCHD_TYPE_ENABLE_STAT
		,T1.IS_MERCHD_TYPE_DELETE
		,T1.IS_HQ
		,T1.MALL_SYS_BUILT_IN_DATA
		,T1.MALL_ENABLE_STAT
		,T1.IS_MALL_DELETE
		,T1.MERCHT_TYPE
		,T1.MERCHT_SYS_BUILT_IN_DATA
		,T1.MERCHT_ENABLE_STAT
		,T1.FINAL_UPDATE_EMPLY
		,T1.IS_MERCHT_DELETE
        ,'1900-01-01'  /*在此借用END_DT字段标识被删除的记录(即END_DT='1900-01-01'的数据)*/
        ,T1.DATA_SRC_TABLE_NAME
        ,T1.ETL_JOB_NUM
        ,T1.ETL_LAD_DTE
FROM DW.VT_DEL_11 T1
LEFT JOIN DW.VT_NEW_11 T2
       ON T1.ID = T2.ID
WHERE T1.END_DT='2999-12-31' 
  AND T1.ETL_JOB_NUM=11 
  AND T2.ID IS NULL

;


/*修改目标表*/
UPDATE DW.VT_DEL_11 T1
SET END_DT='${TX_DATE}'
WHERE END_DT='2999-12-31'
  AND EXISTS (SELECT 1
        FROM DW.VT_INC_11 T2
        WHERE T1.ID = T2.ID
        ) /*这里用的条件是主键字段*/
;


INSERT INTO DW.VT_DEL_11
SELECT * 
FROM DW.VT_INC_11
WHERE END_DT<>'1900-01-01' /*表VT_INC_11中END_DT字段被借用标识被删除的记录(即END_DT='1900-01-01'的数据)*/
;
TRUNCATE TABLE DW.DW_T02_CE_MERCHD_INFO_H;
INSERT INTO DW.DW_T02_CE_MERCHD_INFO_H
SELECT *
FROM DW.VT_DEL_11;